import { TelegramUpdate, TelegramMessage } from "../types/telegram";
import { AIModerationRequest } from "../types/moderation";
import { Bot, Chat } from "../types/config";
import { analyzeMessage } from "./ai-moderation";
import { logModerationAction } from "./logger";
import { logger } from "./logger";
import { RuleRepository } from "../database/repositories/rule-repository";
import { ContextService } from "./context-service";

export class TelegramBot {
  private token: string;
  private botId: string;
  private botConfig: Bot;
  private webhookUrl?: string;
  private isRunning = false;
  private contextService: ContextService;

  constructor(token: string, botId: string, botConfig: Bot) {
    this.token = token;
    this.botId = botId;
    this.botConfig = botConfig;
    this.contextService = new ContextService();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  async handleUpdate(update: TelegramUpdate): Promise<void> {
    try {
      logger.info(
        `–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ ${this.botId}, update_id: ${update.update_id}`
      );

      if (!update.message) {
        logger.debug(
          `–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: update_id=${update.update_id}`
        );
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
      }

      const message = update.message;

      logger.info(
        `–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${message.from.id} –≤ —á–∞—Ç–µ ${message.chat.id}`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —á–∞—Ç–∞
      const chatConfig = this.getChatConfig(message.chat.id);
      if (!chatConfig) {
        logger.warn(
          `–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —á–∞—Ç–∞: chat_id=${message.chat.id}, bot_id=${this.botId}`
        );
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤
      }

      logger.info(
        `–ß–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${chatConfig.name}, –ø—Ä–∞–≤–∏–ª: ${
          chatConfig.rules?.length || 0
        }`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
      if (!message.text) {
        logger.debug(
          `–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞: message_id=${message.message_id}`
        );
        return;
      }

      logger.info(
        `–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: "${message.text.substring(0, 50)}${
          message.text.length > 50 ? "..." : ""
        }"`
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.analyzeAndModerate(message, chatConfig);
    } catch (error) {
      logger.error({ error: error as Error }, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  private async analyzeAndModerate(
    message: TelegramMessage,
    chatConfig: Chat
  ): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.contextService.saveMessage(
        this.botId,
        message.chat.id,
        message.from.id,
        message.message_id,
        message.text!,
        new Date(message.date * 1000) // Telegram date –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      );

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const ruleRepo = new RuleRepository();
      const rules = await ruleRepo.findByIds(chatConfig.rules || []);

      logger.info(
        `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª –¥–ª—è —á–∞—Ç–∞ ${chatConfig.name}: ${rules.length}`
      );

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userContext = await this.contextService.getUserContext(
        this.botId,
        message.chat.id,
        message.from.id,
        {
          username: message.from.username,
          first_name: message.from.first_name,
          last_name: message.from.last_name,
        }
      );

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è AI
      const aiRequest: AIModerationRequest = {
        message: message.text!,
        user_id: message.from.id,
        chat_id: message.chat.id,
        rules: chatConfig.rules,
        context: {
          user_warnings: userContext.user_warnings,
          chat_history: userContext.chat_history,
        },
      };

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
      const aiResponse = await analyzeMessage(aiRequest, rules);

      if (aiResponse.violation_detected) {
        // –ù–∞—Ä—É—à–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
        await this.handleViolation(message, chatConfig, aiResponse);
      } else {
        // –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ—Ç
        logger.debug(
          `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${message.from.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π`
        );
      }
    } catch (error) {
      logger.error({ error: error as Error }, "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è");
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
  private async handleViolation(
    message: TelegramMessage,
    chatConfig: Chat,
    aiResponse: any
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
      const userContext = await this.contextService.getUserContext(
        this.botId,
        message.chat.id,
        message.from.id
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const shouldBan =
        userContext.user_warnings >= chatConfig.warnings_before_ban;

      if (shouldBan) {
        // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.contextService.handleUserBan(
          this.botId,
          message.chat.id,
          message.from.id,
          aiResponse.rule_violated || "unknown"
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ
        const banText =
          `üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n` +
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>${
            message.from.first_name || message.from.username || message.from.id
          }</b> ` +
          `–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞.\n` +
          `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>${userContext.user_warnings}</b>\n` +
          `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: <b>${aiResponse.rule_violated}</b>`;

        await this.sendInfoMessage(message.chat.id, banText);

        logger.warn(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.from.id} –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ ${message.chat.id} –ø–æ—Å–ª–µ ${userContext.user_warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`
        );
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await this.contextService.handleWarning(
          this.botId,
          message.chat.id,
          message.from.id,
          message.message_id,
          aiResponse.rule_violated || "unknown",
          aiResponse.confidence,
          aiResponse.reasoning
        );

        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        logModerationAction({
          bot_id: this.botId,
          chat_id: message.chat.id,
          user_id: message.from.id,
          message_id: message.message_id,
          action: "warning",
          rule_violated: aiResponse.rule_violated,
          ai_confidence: aiResponse.confidence,
          ai_reasoning: aiResponse.reasoning,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ –±–∞–Ω–∞
        const warningsLeft =
          chatConfig.warnings_before_ban - userContext.user_warnings;
        const warningText =
          `‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n` +
          `–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞.\n` +
          `–ù–∞—Ä—É—à–µ–Ω–∏–µ: <b>${aiResponse.rule_violated}</b>\n` +
          `–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>${Math.round(
            aiResponse.confidence * 100
          )}%</b>\n\n` +
          `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>${userContext.user_warnings + 1}/${
            chatConfig.warnings_before_ban
          }</b>\n` +
          `–î–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: <b>${warningsLeft - 1}</b>\n\n` +
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞.`;

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º
        await this.sendMessage(
          message.chat.id,
          warningText,
          message.message_id
        );
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
      if (chatConfig.auto_delete_violations) {
        await this.deleteMessage(message.chat.id, message.message_id);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await this.contextService.handleMessageDeletion(
          this.botId,
          message.chat.id,
          message.message_id,
          `Violation: ${aiResponse.rule_violated}`
        );
      }
    } catch (error) {
      logger.error({ error: error as Error }, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è");
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –æ—Ç–≤–µ—Ç–∞)
  private async sendInfoMessage(chatId: number, text: string): Promise<void> {
    await this.sendMessage(chatId, text);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  private async getBotInfo(): Promise<any> {
    const response = await fetch(
      `https://api.telegram.org/bot${this.token}/getMe`
    );
    const data = await response.json();

    if (!data.ok) {
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${data.description}`
      );
    }

    return data.result;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞
  private getChatConfig(chatId: number): Chat | null {
    return this.botConfig.chats.find((chat) => chat.chat_id === chatId) || null;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  private async sendMessage(
    chatId: number,
    text: string,
    replyToMessageId?: number
  ): Promise<void> {
    const messageData: any = {
      chat_id: chatId,
      text: text,
      parse_mode: "HTML",
    };

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º reply_to_message_id
    if (replyToMessageId) {
      messageData.reply_to_message_id = replyToMessageId;
    }

    const response = await fetch(
      `https://api.telegram.org/bot${this.token}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(messageData),
      }
    );

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.statusText}`);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  private async deleteMessage(
    chatId: number,
    messageId: number
  ): Promise<void> {
    const response = await fetch(
      `https://api.telegram.org/bot${this.token}/deleteMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
        }),
      }
    );

    if (!response.ok) {
      logger.warn(
        `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}: ${response.statusText}`
      );
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
  async setWebhook(url: string): Promise<void> {
    try {
      const response = await fetch(
        `https://api.telegram.org/bot${this.token}/setWebhook`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            url: url,
            allowed_updates: ["message", "edited_message"],
          }),
        }
      );

      const data = await response.json();

      if (!data.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: ${data.description}`);
      }

      this.webhookUrl = url;
      logger.info(`–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${this.botId}: ${url}`);
    } catch (error) {
      logger.error(
        { error: error as Error },
        `–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –±–æ—Ç–∞ ${this.botId}`
      );
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  getBotId(): string {
    return this.botId;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
  isBotRunning(): boolean {
    return this.isRunning;
  }
}
